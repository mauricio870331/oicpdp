/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Views;

import Models.ConectoresModel;
import Models.IntegrationModel;
import OICApi.OicRestApi;
import Utils.Utils;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Map;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JProgressBar;
import javax.swing.JTable;
import javax.swing.MenuElement;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author mherrera
 */
public class MainForm extends javax.swing.JFrame {

    /**
     * Creates new form MainForm
     */
    public MainForm() {
        initComponents();
        setLocationRelativeTo(null);
        setTitle("Benvenido: " + OicRestApi.user);
        Utils.clearDirectory("downloads");
        hideElemnets();
        cargarTablaAmbientes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mnuTblAmbiente = new javax.swing.JPopupMenu();
        itemSeletedEnv = new javax.swing.JMenuItem();
        mnuTblAmbiente2 = new javax.swing.JPopupMenu();
        itemSeletedEnv1 = new javax.swing.JMenuItem();
        mnuTblConectores = new javax.swing.JPopupMenu();
        itemConfigCredencial = new javax.swing.JMenuItem();
        itemTestConection = new javax.swing.JMenuItem();
        jpContent = new javax.swing.JLayeredPane();
        jpConectores = new javax.swing.JPanel();
        cboStatusIntg1 = new javax.swing.JComboBox<>();
        jScrollPane6 = new javax.swing.JScrollPane();
        tblEnvironment2 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblConectTST2 = new javax.swing.JTable();
        pb_tst2_con = new javax.swing.JProgressBar();
        lboConectorsTST2 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        lblinfotstCon = new javax.swing.JLabel();
        lblPreloaderUpdConector = new javax.swing.JLabel();
        lblCurEnv2 = new javax.swing.JLabel();
        jpIntegrations = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblEnvironment = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_integraciones = new javax.swing.JTable();
        pb_tst2 = new javax.swing.JProgressBar();
        lblIntegraTST2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        lblinfotst2 = new javax.swing.JLabel();
        lblPreloaderExport = new javax.swing.JLabel();
        cboStatusIntg = new javax.swing.JComboBox<>();
        lblCurEnv = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnuConfig = new javax.swing.JMenu();
        itemCredenciales = new javax.swing.JMenuItem();
        itemUrlOic = new javax.swing.JMenuItem();
        mnuOicApi = new javax.swing.JMenu();
        itemList = new javax.swing.JMenuItem();
        itemConnections = new javax.swing.JMenuItem();

        itemSeletedEnv.setText("Seleccionar");
        itemSeletedEnv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemSeletedEnvActionPerformed(evt);
            }
        });
        mnuTblAmbiente.add(itemSeletedEnv);

        itemSeletedEnv1.setText("Seleccionar");
        itemSeletedEnv1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemSeletedEnv1ActionPerformed(evt);
            }
        });
        mnuTblAmbiente2.add(itemSeletedEnv1);

        itemConfigCredencial.setText("Reconfigurar Credenciales");
        itemConfigCredencial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemConfigCredencialActionPerformed(evt);
            }
        });
        mnuTblConectores.add(itemConfigCredencial);

        itemTestConection.setText("Probar Conexi√≥n");
        itemTestConection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemTestConectionActionPerformed(evt);
            }
        });
        mnuTblConectores.add(itemTestConection);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        cboStatusIntg1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione Estado", "ACTIVATED", "CONFIGURED", "INPROGRESS" }));

        tblEnvironment2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblEnvironment2.setComponentPopupMenu(mnuTblAmbiente2);
        jScrollPane6.setViewportView(tblEnvironment2);

        tblConectTST2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblConectTST2.setComponentPopupMenu(mnuTblConectores);
        jScrollPane3.setViewportView(tblConectTST2);

        pb_tst2_con.setIndeterminate(true);

        lboConectorsTST2.setText("Total Conectores: 0");

        jButton3.setText("Cargar Datos");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        lblPreloaderUpdConector.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1494.gif"))); // NOI18N

        lblCurEnv2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblCurEnv2.setText("Ambiente Seleccionado: --");

        javax.swing.GroupLayout jpConectoresLayout = new javax.swing.GroupLayout(jpConectores);
        jpConectores.setLayout(jpConectoresLayout);
        jpConectoresLayout.setHorizontalGroup(
            jpConectoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpConectoresLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpConectoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(jpConectoresLayout.createSequentialGroup()
                        .addGroup(jpConectoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpConectoresLayout.createSequentialGroup()
                                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jpConectoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jpConectoresLayout.createSequentialGroup()
                                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblPreloaderUpdConector))
                                    .addComponent(lblinfotstCon, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jpConectoresLayout.createSequentialGroup()
                                        .addComponent(cboStatusIntg1, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(lblCurEnv2, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jpConectoresLayout.createSequentialGroup()
                                .addComponent(lboConectorsTST2, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(167, 167, 167)
                                .addComponent(pb_tst2_con, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 323, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jpConectoresLayout.setVerticalGroup(
            jpConectoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpConectoresLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpConectoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpConectoresLayout.createSequentialGroup()
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGap(13, 13, 13))
                    .addGroup(jpConectoresLayout.createSequentialGroup()
                        .addGroup(jpConectoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpConectoresLayout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addGroup(jpConectoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton3)
                                    .addComponent(lblPreloaderUpdConector, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(lblinfotstCon, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jpConectoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(cboStatusIntg1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblCurEnv2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)))
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 427, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addGroup(jpConectoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pb_tst2_con, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lboConectorsTST2))
                .addGap(27, 27, 27))
        );

        tblEnvironment.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblEnvironment.setComponentPopupMenu(mnuTblAmbiente);
        jScrollPane5.setViewportView(tblEnvironment);

        tbl_integraciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tbl_integraciones);

        pb_tst2.setIndeterminate(true);

        lblIntegraTST2.setText("Total Integraciones: 0");

        jButton1.setText("Cargar Datos");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        lblPreloaderExport.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1494.gif"))); // NOI18N

        cboStatusIntg.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione Estado", "ACTIVATED", "CONFIGURED", "INPROGRESS" }));

        lblCurEnv.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblCurEnv.setText("Ambiente Seleccionado: --");

        javax.swing.GroupLayout jpIntegrationsLayout = new javax.swing.GroupLayout(jpIntegrations);
        jpIntegrations.setLayout(jpIntegrationsLayout);
        jpIntegrationsLayout.setHorizontalGroup(
            jpIntegrationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpIntegrationsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpIntegrationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpIntegrationsLayout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jpIntegrationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblinfotst2, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jpIntegrationsLayout.createSequentialGroup()
                                .addGroup(jpIntegrationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(cboStatusIntg, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jpIntegrationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jpIntegrationsLayout.createSequentialGroup()
                                        .addGap(60, 60, 60)
                                        .addComponent(lblPreloaderExport))
                                    .addGroup(jpIntegrationsLayout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(lblCurEnv, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(jpIntegrationsLayout.createSequentialGroup()
                        .addComponent(lblIntegraTST2, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(175, 175, 175)
                        .addComponent(pb_tst2, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 312, Short.MAX_VALUE))
            .addGroup(jpIntegrationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jpIntegrationsLayout.createSequentialGroup()
                    .addGap(14, 14, 14)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 995, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(19, Short.MAX_VALUE)))
        );
        jpIntegrationsLayout.setVerticalGroup(
            jpIntegrationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpIntegrationsLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jpIntegrationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpIntegrationsLayout.createSequentialGroup()
                        .addGroup(jpIntegrationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cboStatusIntg)
                            .addComponent(lblCurEnv, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpIntegrationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpIntegrationsLayout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addGap(18, 18, 18)
                                .addComponent(lblinfotst2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lblPreloaderExport, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 454, Short.MAX_VALUE)
                .addGroup(jpIntegrationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pb_tst2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblIntegraTST2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(36, 36, 36))
            .addGroup(jpIntegrationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jpIntegrationsLayout.createSequentialGroup()
                    .addGap(135, 135, 135)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 389, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(104, Short.MAX_VALUE)))
        );

        jLabel1.setText("HELLO WORDL");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(384, 384, 384)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 479, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(165, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(186, 186, 186)
                .addComponent(jLabel1)
                .addContainerGap(425, Short.MAX_VALUE))
        );

        jpContent.setLayer(jpConectores, javax.swing.JLayeredPane.PALETTE_LAYER);
        jpContent.setLayer(jpIntegrations, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jpContent.setLayer(jPanel1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jpContentLayout = new javax.swing.GroupLayout(jpContent);
        jpContent.setLayout(jpContentLayout);
        jpContentLayout.setHorizontalGroup(
            jpContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jpContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jpIntegrations, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jpContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jpContentLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jpConectores, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jpContentLayout.setVerticalGroup(
            jpContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpContentLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 7, Short.MAX_VALUE))
            .addGroup(jpContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jpContentLayout.createSequentialGroup()
                    .addComponent(jpIntegrations, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
            .addGroup(jpContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpContentLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jpConectores, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        mnuConfig.setText("Configuraci√≥n");

        itemCredenciales.setText("Configurar credenciales de aplicaci√≥n");
        itemCredenciales.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemCredencialesActionPerformed(evt);
            }
        });
        mnuConfig.add(itemCredenciales);

        itemUrlOic.setText("Configurar Url¬¥s de OIC");
        itemUrlOic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemUrlOicActionPerformed(evt);
            }
        });
        mnuConfig.add(itemUrlOic);

        jMenuBar1.add(mnuConfig);

        mnuOicApi.setText("Oic Api");

        itemList.setText("Listar Integraciones");
        itemList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemListActionPerformed(evt);
            }
        });
        mnuOicApi.add(itemList);

        itemConnections.setLabel("Listar Conectores");
        itemConnections.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemConnectionsActionPerformed(evt);
            }
        });
        mnuOicApi.add(itemConnections);
        itemConnections.getAccessibleContext().setAccessibleDescription("");

        jMenuBar1.add(mnuOicApi);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jpContent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jpContent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void itemListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemListActionPerformed
        jPanel1.setVisible(false);
        jpConectores.setVisible(false);
        jpIntegrations.setVisible(true);
//        MiHilo miHilo = new MiHilo("TST2", tbl_integraciones, lblIntegraTST2, pb_tst2);
//        miHilo.start();      
    }//GEN-LAST:event_itemListActionPerformed

    private void itemUrlOicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemUrlOicActionPerformed
        ConfigUrlOic cuo = new ConfigUrlOic();
        cuo.setVisible(true);
    }//GEN-LAST:event_itemUrlOicActionPerformed

    private void itemCredencialesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemCredencialesActionPerformed
        ConfigCredentials cc = new ConfigCredentials();
        cc.setVisible(true);
    }//GEN-LAST:event_itemCredencialesActionPerformed

    private void itemConnectionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemConnectionsActionPerformed
        jPanel1.setVisible(false);
        jpIntegrations.setVisible(false);
        jpConectores.setVisible(true);
        selectedEnv = "";
    }//GEN-LAST:event_itemConnectionsActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if (selectedEnv.equals("")) {
            JOptionPane.showMessageDialog(null, "Debes seleccionar un ambiente..!");
            return;
        }
        for (MenuElement menuItem : mnuTblConTst2.getSubElements()) {
            if (menuItem instanceof MenuElement) {
                JMenuItem item = (JMenuItem) menuItem;
                if (item.getText().split(":")[1].trim().equals(selectedEnv)) {
                    item.setVisible(false);
                } else {
                    item.setVisible(true);
                }
            }
        }
        String status = cboStatusIntg1.getSelectedItem().toString();
        MiHiloCon cargarConectores = new MiHiloCon(selectedEnv, status);
        cargarConectores.start();


    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (selectedEnv.equals("")) {
            JOptionPane.showMessageDialog(null, "Debes seleccionar un ambiente..!");
            return;
        }

        for (MenuElement menuItem : mnuTblTst2.getSubElements()) {
            if (menuItem instanceof MenuElement) {
                JMenuItem item = (JMenuItem) menuItem;
                if (item.getText().split(":")[1].trim().equals(selectedEnv)) {
                    item.setVisible(false);
                } else {
                    item.setVisible(true);
                }
            }
        }
        String status = cboStatusIntg.getSelectedItem().toString();
        MiHilo miHilo = new MiHilo(selectedEnv + "", tbl_integraciones, lblIntegraTST2, pb_tst2, status);
        miHilo.start();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void itemSeletedEnvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemSeletedEnvActionPerformed
        int row = tblEnvironment.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(null, "Debes seleccionar una fila");
            return;
        }
        String value = tblEnvironment.getModel().getValueAt(row, 0).toString();
        selectedEnv = value;
        lblCurEnv.setText("Ambiente Seleccionado: " + value);
    }//GEN-LAST:event_itemSeletedEnvActionPerformed

    private void itemSeletedEnv1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemSeletedEnv1ActionPerformed
        int row = tblEnvironment2.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(null, "Debes seleccionar una fila");
            return;
        }
        String value = tblEnvironment2.getModel().getValueAt(row, 0).toString();
        selectedEnv = value;
        lblCurEnv2.setText("Ambiente Seleccionado: " + value);
    }//GEN-LAST:event_itemSeletedEnv1ActionPerformed

    private void itemConfigCredencialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemConfigCredencialActionPerformed
        int row = tblConectTST2.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(null, "Debes seleccionar una fila");
            return;
        }
        String id = tblConectTST2.getModel().getValueAt(row, 0).toString();
        String env = tblConectTST2.getModel().getValueAt(row, 3).toString();

        ConfigConector hiloUpdate = new ConfigConector(id, env, 1);
        hiloUpdate.start();
    }//GEN-LAST:event_itemConfigCredencialActionPerformed

    private void itemTestConectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemTestConectionActionPerformed
        int row = tblConectTST2.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(null, "Debes seleccionar una fila");
            return;
        }
        String id = tblConectTST2.getModel().getValueAt(row, 0).toString();
        String env = tblConectTST2.getModel().getValueAt(row, 3).toString();

        ConfigConector hiloUpdate = new ConfigConector(id, env, 2);
        hiloUpdate.start();
    }//GEN-LAST:event_itemTestConectionActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cboStatusIntg;
    private javax.swing.JComboBox<String> cboStatusIntg1;
    private javax.swing.JMenuItem itemConfigCredencial;
    private javax.swing.JMenuItem itemConnections;
    private javax.swing.JMenuItem itemCredenciales;
    private javax.swing.JMenuItem itemList;
    private javax.swing.JMenuItem itemSeletedEnv;
    private javax.swing.JMenuItem itemSeletedEnv1;
    private javax.swing.JMenuItem itemTestConection;
    private javax.swing.JMenuItem itemUrlOic;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JPanel jpConectores;
    private javax.swing.JLayeredPane jpContent;
    private javax.swing.JPanel jpIntegrations;
    private javax.swing.JLabel lblCurEnv;
    private javax.swing.JLabel lblCurEnv2;
    private javax.swing.JLabel lblIntegraTST2;
    private javax.swing.JLabel lblPreloaderExport;
    private javax.swing.JLabel lblPreloaderUpdConector;
    private javax.swing.JLabel lblinfotst2;
    private javax.swing.JLabel lblinfotstCon;
    private javax.swing.JLabel lboConectorsTST2;
    private javax.swing.JMenu mnuConfig;
    private javax.swing.JMenu mnuOicApi;
    private javax.swing.JPopupMenu mnuTblAmbiente;
    private javax.swing.JPopupMenu mnuTblAmbiente2;
    private javax.swing.JPopupMenu mnuTblConectores;
    private javax.swing.JProgressBar pb_tst2;
    private javax.swing.JProgressBar pb_tst2_con;
    private javax.swing.JTable tblConectTST2;
    private javax.swing.JTable tblEnvironment;
    private javax.swing.JTable tblEnvironment2;
    private javax.swing.JTable tbl_integraciones;
    // End of variables declaration//GEN-END:variables

    //CustomVars
    private String selectedEnv = "";
    JPopupMenu mnuTblTst2 = new JPopupMenu();
    JPopupMenu mnuTblConTst2 = new JPopupMenu();

    class PopupMenuListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            JMenuItem menuItem = (JMenuItem) e.getSource();
            String[] souceEnvpart = menuItem.getText().split(":");
            int row = tbl_integraciones.getSelectedRow();
            if (row == -1) {
                JOptionPane.showMessageDialog(null, "Debes seleccionar una fila");
                return;
            }
            String value = tbl_integraciones.getModel().getValueAt(row, 0).toString();
            String name = tbl_integraciones.getModel().getValueAt(row, 1).toString() + ".iar";
            String version = tbl_integraciones.getModel().getValueAt(row, 4).toString();
            tbl_integraciones.clearSelection();
            ExportarIntegracion hexportar = new ExportarIntegracion(value, name.replaceAll(" ", "_"), souceEnvpart[1].trim(), version);
            hexportar.start();
        }
    }

    private void cargarTablaAmbientes() {
        PopupMenuListener listener = new PopupMenuListener();
        DefaultTableModel modeloTabla = new DefaultTableModel();
        // Agregar columnas a nuestro modelo de tabla
        modeloTabla.addColumn("AMBIENTE");
        Map<String, String> urlsMap = Utils.leerArchivoProperties();
        for (Map.Entry<String, String> entry : urlsMap.entrySet()) {
            modeloTabla.addRow(new Object[]{entry.getKey()});
            JMenuItem elemento = new JMenuItem("Migrar a: " + entry.getKey());
            elemento.addActionListener(listener);
            mnuTblTst2.add(elemento);
        }
        tbl_integraciones.setComponentPopupMenu(mnuTblTst2);
        // Asignar el modelo de tabla a nuestro JTable
        tblEnvironment.setModel(modeloTabla);
        tblEnvironment2.setModel(modeloTabla);
    }

    private void hideElemnets() {
        jpIntegrations.setVisible(false);
        jpConectores.setVisible(false);
        pb_tst2.setVisible(false);
        pb_tst2_con.setVisible(false);
        lblPreloaderExport.setVisible(false);
        lblPreloaderUpdConector.setVisible(false);
    }

    private void cargarIntegraciones(String env, JTable table, JLabel lbl, JProgressBar pb, String status) {
        pb.setVisible(true);
        IntegrationModel im = new IntegrationModel();
        Map<String, Object> respuesta = im.getIntegrations(env, status);
        int total = (int) respuesta.get("total");
        lbl.setText("Total Integraciones: " + total);

        JsonArray list = (JsonArray) respuesta.get("integraciones");
//        System.out.println("list " + list);
        DefaultTableModel modeloTabla = new DefaultTableModel();
        // Agregar columnas a nuestro modelo de tabla
        modeloTabla.addColumn("ID");
        modeloTabla.addColumn("NAME");
        modeloTabla.addColumn("CODE");
        modeloTabla.addColumn("STATUS");
        modeloTabla.addColumn("ENV");
        modeloTabla.addColumn("VERSION");
        for (JsonElement jsonElement : list) {
            JsonObject jsonObject = jsonElement.getAsJsonObject();
            String ID = jsonObject.get("id").getAsString();
            String NAME = jsonObject.get("name").getAsString();
            String STATUS = jsonObject.get("status").getAsString();
            String CODE = jsonObject.get("code").getAsString();
            String VERSION = jsonObject.get("version").getAsString();
            modeloTabla.addRow(new Object[]{ID, NAME, CODE, STATUS, env, VERSION});
        }
// Asignar el modelo de tabla a nuestro JTable
        table.setModel(modeloTabla);
        table.getTableHeader().getColumnModel().getColumn(0).setMaxWidth(0);
        table.getTableHeader().getColumnModel().getColumn(0).setMinWidth(0);
        table.getColumnModel().getColumn(0).setPreferredWidth(0);
        table.getColumnModel().getColumn(0).setMaxWidth(0);
        table.getColumnModel().getColumn(0).setMinWidth(0);
        table.getColumnModel().getColumn(3).setMaxWidth(150);
        table.getColumnModel().getColumn(3).setMinWidth(150);
        table.getColumnModel().getColumn(4).setMaxWidth(120);
        table.getColumnModel().getColumn(4).setMinWidth(120);

        table.setModel(modeloTabla);
        pb.setVisible(false);
        lblinfotst2.setText("");

    }

    //Hilos
    public class MiHilo extends Thread {

        String ambiente;
        String status;
        JTable table;
        JLabel lbl;
        JProgressBar pb;

        public MiHilo(String ambiente, JTable table, JLabel lbl, JProgressBar pb, String status) {
            this.ambiente = ambiente;
            this.table = table;
            this.lbl = lbl;
            this.pb = pb;
            this.status = status;
        }

        @Override
        public void run() {
            cargarIntegraciones(ambiente, table, lbl, pb, status);
        }
    }

    //Hilos
    public class MiHiloCon extends Thread {

        String ambiente;
        String status;

        public MiHiloCon(String ambiente, String status) {
            this.ambiente = ambiente;
            this.status = status;
        }

        @Override
        public void run() {
            cargarConectores(ambiente, status);
        }
    }

    public class ExportarIntegracion extends Thread {

        String ambiente;
        String id;
        String nombre;
        String version;

        public ExportarIntegracion(String id, String nombre, String ambiente, String version) {
            this.ambiente = ambiente;
            this.id = id;
            this.nombre = nombre;
            this.version = version;
        }

        @Override
        public void run() {
            lblinfotst2.setText("Exportando integraci√≥n..");
            lblPreloaderExport.setVisible(true);
            OicRestApi oic = new OicRestApi();
            boolean r = oic.exportIntegration(id, nombre, ambiente);
            lblPreloaderExport.setVisible(false);
            lblinfotst2.setText("");
            if (r) {
                ImportarIntegracion hiloImportar = new ImportarIntegracion(id, nombre, ambiente, version);
                hiloImportar.start();
            }
        }
    }

    public class ImportarIntegracion extends Thread {

        String ambiente;
        String id;
        String nombre;
        String version;

        public ImportarIntegracion(String id, String nombre, String ambiente, String version) {
            this.ambiente = ambiente;
            this.id = id;
            this.nombre = nombre;
            this.version = version;

        }

        @Override
        public void run() {

            //Refrescar el copnector con las credenciales
            //Activar integarcione
            lblinfotst2.setText("Importando integraci√≥n...");
            lblPreloaderExport.setVisible(true);
            OicRestApi oic = new OicRestApi();
            int response = oic.importIntegration(nombre, "UAT2", "POST");
            Map<String, Object> r;
            if (response == 200) {
                lblinfotst2.setText("Activando integraci√≥n...");
                r = oic.activateDeactivateIntg(id, "UAT2");
                responseMessage((int) (r.get("response_code")), r.get("response"));
            }

            if (response == 409) {
                int result = JOptionPane.showConfirmDialog(MainForm.this, "¬øLa integraci√≥n " + nombre + " V(" + version + ") ya existe, desea reemplazarla?",
                        "Confirmaci√≥n..!",
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.QUESTION_MESSAGE);
                if (result == JOptionPane.YES_OPTION) {
                    response = oic.importIntegration(nombre, "UAT2", "PUT");
                    if (response == 200) {
                        lblinfotst2.setText("Activando integraci√≥n...");
                        r = oic.activateDeactivateIntg(id, "UAT2");
                        responseMessage((int) (r.get("response_code")), r.get("response"));
                    }
                }

            }
            lblinfotst2.setText("");
            lblPreloaderExport.setVisible(false);
        }

    }

    public void responseMessage(int code, Object response) {
        String message = "";
        switch (code) {
            case 200:
                message = "Integraci√≥n activada correctamente";
                break;
            case 404:
                message = "Integraci√≥n no encontrada";
                break;
            case 412:
                message = "La integraci√≥n ya esta activada o desactivada";
                break;
            case 500:
                message = "Ocurio un error al tratar de activar la integarci√≥n, realice lo siguiene:"
                        + "\n1.Verifique que las conexiones origen y destino funcionen correctamente."
                        + "\n2.Reconfigure las credenciales en el conetor Origen."
                        + "\n3.Haga una prueba del conector para confirmar su funcionalidad.";
                break;
        }
        lblinfotst2.setText("");
        lblPreloaderExport.setVisible(false);
        if (code == 500) {

        } else {
            JOptionPane.showMessageDialog(MainForm.this, message);
        }
    }

    //Hilo configura conectores
    public class ConfigConector extends Thread {

        String ambiente;
        String id;
        int option;

        public ConfigConector(String id, String ambiente, int option) {
            this.ambiente = ambiente;
            this.id = id;
            this.option = option;
        }

        @Override
        public void run() {
            Map<String, Object> r = null;
            lblinfotstCon.setText("Actualizando credenciales");
            lblPreloaderUpdConector.setVisible(true);
            ConectoresModel cm = new ConectoresModel();
            if (option == 1) {
              r = cm.updateConectionCredentials(ambiente, id);  
            }
            if (option == 2) {
                  r = cm.testConection(ambiente, id);  
            }
             
            String responseCode = r.get("response_code").toString() + "-" + option;
            lblPreloaderUpdConector.setVisible(false);
            String Mensaje = "";
            switch (responseCode) {
                case "200-1":
                    Mensaje = "Credenciales Actualizadas..!";
                    break;
                case "200-2":
                    Mensaje = "La conexi√≥n se encuentra ok..!";
                    break;
                case "400-1":
                    Mensaje = "Error en la solicitud..!";
                    break;
                case "404-2":
                    Mensaje = "Conexi√≥n no encontrada..!";
                    break;
                case "409-2":
                    Mensaje = "Conexi√≥n no configurada..!";
                    break;
                case "412-2":
                    Mensaje = "Conector Bloqueado, por favor desbloqueelo en OIC..!";
                    break;
                case "423-1":
                    Mensaje = "Conector Bloqueado, por favor desbloqueelo en OIC..!";
                    break;
                case "500-1":
                    Mensaje = "Error en el servidor..!";
                    break;
                case "500-2":
                    Mensaje = "Error en el servidor..!";
                    break;
                default:
                    Mensaje = "No existen credenciales configuradas para el conector:  " + id + ".\n"
                            + "Configurelas en el men√∫: \"Configuraci√≥n->Configurar credenciales de aplicaci√≥n\"..!";
                    break;
            }
            lblinfotstCon.setText(Mensaje);
            JOptionPane.showMessageDialog(null, Mensaje, "Mensaje", JOptionPane.INFORMATION_MESSAGE);
            lblinfotstCon.setText("");
//            System.out.println("r = " + responseCode);
        }
    }

    private void cargarConectores(String env, String status) {

        pb_tst2_con.setVisible(true);
        ConectoresModel cm = new ConectoresModel();
        Map<String, Object> respuesta = cm.getConections(env, status);
        int total = (int) respuesta.get("total");
        lboConectorsTST2.setText("Total Conectores: " + total);

        JsonArray list = (JsonArray) respuesta.get("conectores");
        DefaultTableModel modeloTabla = new DefaultTableModel();
//        System.out.println("Lista " + list);
        // Agregar columnas a nuestro modelo de tabla
        modeloTabla.addColumn("ID");
        modeloTabla.addColumn("NAME");
        modeloTabla.addColumn("STATUS");
        modeloTabla.addColumn("ENV");
        for (JsonElement jsonElement : list) {
            JsonObject jsonObject = jsonElement.getAsJsonObject();
            String ID = jsonObject.get("id").getAsString();
            String NAME = jsonObject.get("name").getAsString();
            String STATUS = jsonObject.get("status").getAsString();
            modeloTabla.addRow(new Object[]{ID, NAME, STATUS, env});
        }
// Asignar el modelo de tabla a nuestro JTable
        tblConectTST2.setModel(modeloTabla);
        tblConectTST2.getTableHeader().getColumnModel().getColumn(0).setMaxWidth(0);
        tblConectTST2.getTableHeader().getColumnModel().getColumn(0).setMinWidth(0);
        tblConectTST2.getColumnModel().getColumn(0).setPreferredWidth(0);
        tblConectTST2.getColumnModel().getColumn(0).setMaxWidth(0);
        tblConectTST2.getColumnModel().getColumn(0).setMinWidth(0);
        tblConectTST2.getColumnModel().getColumn(3).setMaxWidth(150);
        tblConectTST2.getColumnModel().getColumn(3).setMinWidth(150);
//        tblConectTST2.getColumnModel().getColumn(4).setMaxWidth(120);
//        tblConectTST2.getColumnModel().getColumn(4).setMinWidth(120);

        tblConectTST2.setModel(modeloTabla);
        pb_tst2_con.setVisible(false);
        lblinfotst2.setText("");

    }

}
